/**
 * Name: Andrew Semchism
 * Date: June 10 2018
 * Description: A hangman game
 */
package main;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import java.util.ArrayList;




public class PlayScreen extends javax.swing.JFrame {
    
    //initializes variables
    public static int counter = 0;
    public static int random;
    public static String[] wordsList;
    public static String spaces;
    public static String[] letters;
    public static ArrayList<String> chosenLetters = new ArrayList<String>();
    
    public void lose() {
        //disables all buttons
        A.setEnabled(false);
        B.setEnabled(false);
        C.setEnabled(false);
        D.setEnabled(false);
        E.setEnabled(false);
        F.setEnabled(false);
        G.setEnabled(false);
        H.setEnabled(false);
        I.setEnabled(false);
        J.setEnabled(false);
        K.setEnabled(false);
        L.setEnabled(false);
        M.setEnabled(false);
        N.setEnabled(false);
        O.setEnabled(false);
        P.setEnabled(false);
        Q.setEnabled(false);
        R.setEnabled(false);
        S.setEnabled(false);
        T.setEnabled(false);
        U.setEnabled(false);
        V.setEnabled(false);
        W.setEnabled(false);
        X.setEnabled(false);
        Y.setEnabled(false);
        Z.setEnabled(false);
        //shows the continue button
        ContinueL.setVisible(true);
    }
    
    public void win() {
        //disables all buttons
        A.setEnabled(false);
        B.setEnabled(false);
        C.setEnabled(false);
        D.setEnabled(false);
        E.setEnabled(false);
        F.setEnabled(false);
        G.setEnabled(false);
        H.setEnabled(false);
        I.setEnabled(false);
        J.setEnabled(false);
        K.setEnabled(false);
        L.setEnabled(false);
        M.setEnabled(false);
        N.setEnabled(false);
        O.setEnabled(false);
        P.setEnabled(false);
        Q.setEnabled(false);
        R.setEnabled(false);
        S.setEnabled(false);
        T.setEnabled(false);
        U.setEnabled(false);
        V.setEnabled(false);
        W.setEnabled(false);
        X.setEnabled(false);
        Y.setEnabled(false);
        Z.setEnabled(false);
        //shows the continue button
        ContinueW.setVisible(true);
    }

    /**
     * Creates new form PlayScreen
     */
    public PlayScreen() throws SAXException {
        initComponents();
        
        //all body parts of the hangman are set as invisable
        rightFoot.setVisible(false);
        leftFoot.setVisible(false);
        rightArm.setVisible(false);
        leftArm.setVisible(false);
        head.setVisible(false);
        body.setVisible(false);
        deadEyes.setVisible(false);
        //Continue buttons are set as invisible
        ContinueL.setVisible(false);
        ContinueW.setVisible(false);
        
        try { //accesses the wordsList XML file
                File file = new File("wordsList.xml");
                DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
                Document document = documentBuilder.parse(file);
                String words = document.getElementsByTagName("Words").item(0).getTextContent();
                wordsList = words.split(",", -1); //adds all the words to wordsList


        }            
        catch (SAXParseException err) {

            } catch (IOException ex) {
                Logger.getLogger(PlayScreen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(PlayScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
   
        random = new Random().nextInt(wordsList.length); //choses a random number (random number used to chose random words from the wordsList array)
        spaces = wordsList[random].replaceAll(".", "_ ").trim(); //blank spaces for the display
        letters = wordsList[random].split("(?!^)"); //formats the letters
        wordDisplay.setText(spaces); //displays the blank spaces
        
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        A = new javax.swing.JButton();
        B = new javax.swing.JButton();
        C = new javax.swing.JButton();
        D = new javax.swing.JButton();
        E = new javax.swing.JButton();
        F = new javax.swing.JButton();
        G = new javax.swing.JButton();
        H = new javax.swing.JButton();
        I = new javax.swing.JButton();
        J = new javax.swing.JButton();
        K = new javax.swing.JButton();
        L = new javax.swing.JButton();
        M = new javax.swing.JButton();
        N = new javax.swing.JButton();
        O = new javax.swing.JButton();
        P = new javax.swing.JButton();
        Q = new javax.swing.JButton();
        R = new javax.swing.JButton();
        S = new javax.swing.JButton();
        T = new javax.swing.JButton();
        U = new javax.swing.JButton();
        V = new javax.swing.JButton();
        W = new javax.swing.JButton();
        X = new javax.swing.JButton();
        Y = new javax.swing.JButton();
        Z = new javax.swing.JButton();
        wordDisplay = new javax.swing.JTextField();
        ContinueL = new javax.swing.JButton();
        ContinueW = new javax.swing.JButton();
        deadEyes = new javax.swing.JLabel();
        rightFoot = new javax.swing.JLabel();
        leftFoot = new javax.swing.JLabel();
        rightArm = new javax.swing.JLabel();
        leftArm = new javax.swing.JLabel();
        body = new javax.swing.JLabel();
        head = new javax.swing.JLabel();
        backround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 520));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setOpaque(false);

        A.setBackground(new java.awt.Color(100, 150, 240));
        A.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        A.setText("A");
        A.setMaximumSize(new java.awt.Dimension(52, 50));
        A.setMinimumSize(new java.awt.Dimension(52, 50));
        A.setPreferredSize(new java.awt.Dimension(52, 50));
        A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AActionPerformed(evt);
            }
        });
        jPanel1.add(A);

        B.setBackground(new java.awt.Color(100, 150, 240));
        B.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        B.setText("B");
        B.setMaximumSize(new java.awt.Dimension(52, 50));
        B.setMinimumSize(new java.awt.Dimension(52, 50));
        B.setPreferredSize(new java.awt.Dimension(52, 50));
        B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActionPerformed(evt);
            }
        });
        jPanel1.add(B);

        C.setBackground(new java.awt.Color(100, 150, 240));
        C.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        C.setText("C");
        C.setMaximumSize(new java.awt.Dimension(52, 50));
        C.setMinimumSize(new java.awt.Dimension(52, 50));
        C.setPreferredSize(new java.awt.Dimension(52, 50));
        C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CActionPerformed(evt);
            }
        });
        jPanel1.add(C);

        D.setBackground(new java.awt.Color(100, 150, 240));
        D.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        D.setText("D");
        D.setMaximumSize(new java.awt.Dimension(52, 50));
        D.setMinimumSize(new java.awt.Dimension(52, 50));
        D.setPreferredSize(new java.awt.Dimension(52, 50));
        D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DActionPerformed(evt);
            }
        });
        jPanel1.add(D);

        E.setBackground(new java.awt.Color(100, 150, 240));
        E.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        E.setText("E");
        E.setMaximumSize(new java.awt.Dimension(52, 50));
        E.setMinimumSize(new java.awt.Dimension(52, 50));
        E.setPreferredSize(new java.awt.Dimension(52, 50));
        E.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EActionPerformed(evt);
            }
        });
        jPanel1.add(E);

        F.setBackground(new java.awt.Color(100, 150, 240));
        F.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        F.setText("F");
        F.setMaximumSize(new java.awt.Dimension(52, 50));
        F.setMinimumSize(new java.awt.Dimension(52, 50));
        F.setPreferredSize(new java.awt.Dimension(52, 50));
        F.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FActionPerformed(evt);
            }
        });
        jPanel1.add(F);

        G.setBackground(new java.awt.Color(100, 150, 240));
        G.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        G.setText("G");
        G.setMaximumSize(new java.awt.Dimension(52, 50));
        G.setMinimumSize(new java.awt.Dimension(52, 50));
        G.setPreferredSize(new java.awt.Dimension(52, 50));
        G.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GActionPerformed(evt);
            }
        });
        jPanel1.add(G);

        H.setBackground(new java.awt.Color(100, 150, 240));
        H.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        H.setText("H");
        H.setMaximumSize(new java.awt.Dimension(52, 50));
        H.setMinimumSize(new java.awt.Dimension(52, 50));
        H.setPreferredSize(new java.awt.Dimension(52, 50));
        H.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HActionPerformed(evt);
            }
        });
        jPanel1.add(H);

        I.setBackground(new java.awt.Color(100, 150, 240));
        I.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        I.setText("I");
        I.setMaximumSize(new java.awt.Dimension(52, 50));
        I.setMinimumSize(new java.awt.Dimension(52, 50));
        I.setPreferredSize(new java.awt.Dimension(52, 50));
        I.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IActionPerformed(evt);
            }
        });
        jPanel1.add(I);

        J.setBackground(new java.awt.Color(100, 150, 240));
        J.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        J.setText("J");
        J.setMaximumSize(new java.awt.Dimension(52, 50));
        J.setMinimumSize(new java.awt.Dimension(52, 50));
        J.setPreferredSize(new java.awt.Dimension(52, 50));
        J.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JActionPerformed(evt);
            }
        });
        jPanel1.add(J);

        K.setBackground(new java.awt.Color(100, 150, 240));
        K.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        K.setText("K");
        K.setMaximumSize(new java.awt.Dimension(52, 50));
        K.setMinimumSize(new java.awt.Dimension(52, 50));
        K.setPreferredSize(new java.awt.Dimension(52, 50));
        K.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KActionPerformed(evt);
            }
        });
        jPanel1.add(K);

        L.setBackground(new java.awt.Color(100, 150, 240));
        L.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        L.setText("L");
        L.setMaximumSize(new java.awt.Dimension(52, 50));
        L.setMinimumSize(new java.awt.Dimension(52, 50));
        L.setPreferredSize(new java.awt.Dimension(52, 50));
        L.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LActionPerformed(evt);
            }
        });
        jPanel1.add(L);

        M.setBackground(new java.awt.Color(100, 150, 240));
        M.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        M.setText("M");
        M.setMaximumSize(new java.awt.Dimension(52, 50));
        M.setMinimumSize(new java.awt.Dimension(52, 50));
        M.setPreferredSize(new java.awt.Dimension(52, 50));
        M.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MActionPerformed(evt);
            }
        });
        jPanel1.add(M);

        N.setBackground(new java.awt.Color(100, 150, 240));
        N.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        N.setText("N");
        N.setMaximumSize(new java.awt.Dimension(52, 50));
        N.setMinimumSize(new java.awt.Dimension(52, 50));
        N.setPreferredSize(new java.awt.Dimension(52, 50));
        N.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NActionPerformed(evt);
            }
        });
        jPanel1.add(N);

        O.setBackground(new java.awt.Color(100, 150, 240));
        O.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        O.setText("O");
        O.setMaximumSize(new java.awt.Dimension(52, 50));
        O.setMinimumSize(new java.awt.Dimension(52, 50));
        O.setPreferredSize(new java.awt.Dimension(52, 50));
        O.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OActionPerformed(evt);
            }
        });
        jPanel1.add(O);

        P.setBackground(new java.awt.Color(100, 150, 240));
        P.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        P.setText("P");
        P.setMaximumSize(new java.awt.Dimension(52, 50));
        P.setMinimumSize(new java.awt.Dimension(52, 50));
        P.setPreferredSize(new java.awt.Dimension(52, 50));
        P.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PActionPerformed(evt);
            }
        });
        jPanel1.add(P);

        Q.setBackground(new java.awt.Color(100, 150, 240));
        Q.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        Q.setText("Q");
        Q.setMaximumSize(new java.awt.Dimension(52, 50));
        Q.setMinimumSize(new java.awt.Dimension(52, 50));
        Q.setPreferredSize(new java.awt.Dimension(52, 50));
        Q.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QActionPerformed(evt);
            }
        });
        jPanel1.add(Q);

        R.setBackground(new java.awt.Color(100, 150, 240));
        R.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        R.setText("R");
        R.setMaximumSize(new java.awt.Dimension(52, 50));
        R.setMinimumSize(new java.awt.Dimension(52, 50));
        R.setPreferredSize(new java.awt.Dimension(52, 50));
        R.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RActionPerformed(evt);
            }
        });
        jPanel1.add(R);

        S.setBackground(new java.awt.Color(100, 150, 240));
        S.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        S.setText("S");
        S.setMaximumSize(new java.awt.Dimension(52, 50));
        S.setMinimumSize(new java.awt.Dimension(52, 50));
        S.setPreferredSize(new java.awt.Dimension(52, 50));
        S.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SActionPerformed(evt);
            }
        });
        jPanel1.add(S);

        T.setBackground(new java.awt.Color(100, 150, 240));
        T.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        T.setText("T");
        T.setMaximumSize(new java.awt.Dimension(52, 50));
        T.setMinimumSize(new java.awt.Dimension(52, 50));
        T.setPreferredSize(new java.awt.Dimension(52, 50));
        T.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TActionPerformed(evt);
            }
        });
        jPanel1.add(T);

        U.setBackground(new java.awt.Color(100, 150, 240));
        U.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        U.setText("U");
        U.setMaximumSize(new java.awt.Dimension(52, 50));
        U.setMinimumSize(new java.awt.Dimension(52, 50));
        U.setPreferredSize(new java.awt.Dimension(52, 50));
        U.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UActionPerformed(evt);
            }
        });
        jPanel1.add(U);

        V.setBackground(new java.awt.Color(100, 150, 240));
        V.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        V.setText("V");
        V.setMaximumSize(new java.awt.Dimension(52, 50));
        V.setMinimumSize(new java.awt.Dimension(52, 50));
        V.setPreferredSize(new java.awt.Dimension(52, 50));
        V.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VActionPerformed(evt);
            }
        });
        jPanel1.add(V);

        W.setBackground(new java.awt.Color(100, 150, 240));
        W.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        W.setText("W");
        W.setMaximumSize(new java.awt.Dimension(52, 50));
        W.setMinimumSize(new java.awt.Dimension(52, 50));
        W.setPreferredSize(new java.awt.Dimension(52, 50));
        W.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WActionPerformed(evt);
            }
        });
        jPanel1.add(W);

        X.setBackground(new java.awt.Color(100, 150, 240));
        X.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        X.setText("X");
        X.setMaximumSize(new java.awt.Dimension(52, 50));
        X.setMinimumSize(new java.awt.Dimension(52, 50));
        X.setPreferredSize(new java.awt.Dimension(52, 50));
        X.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XActionPerformed(evt);
            }
        });
        jPanel1.add(X);

        Y.setBackground(new java.awt.Color(100, 150, 240));
        Y.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        Y.setText("Y");
        Y.setMaximumSize(new java.awt.Dimension(52, 50));
        Y.setMinimumSize(new java.awt.Dimension(52, 50));
        Y.setPreferredSize(new java.awt.Dimension(52, 50));
        Y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YActionPerformed(evt);
            }
        });
        jPanel1.add(Y);

        Z.setBackground(new java.awt.Color(100, 150, 240));
        Z.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        Z.setText("Z");
        Z.setMaximumSize(new java.awt.Dimension(52, 50));
        Z.setMinimumSize(new java.awt.Dimension(52, 50));
        Z.setPreferredSize(new java.awt.Dimension(52, 50));
        Z.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZActionPerformed(evt);
            }
        });
        jPanel1.add(Z);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 140, 330, 400);

        wordDisplay.setFont(new java.awt.Font("Yu Gothic Medium", 0, 48)); // NOI18N
        wordDisplay.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wordDisplay.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        wordDisplay.setDisabledTextColor(new java.awt.Color(0, 0, 109));
        wordDisplay.setDoubleBuffered(true);
        wordDisplay.setEnabled(false);
        getContentPane().add(wordDisplay);
        wordDisplay.setBounds(120, 20, 480, 80);

        ContinueL.setBackground(new java.awt.Color(200, 50, 0));
        ContinueL.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ContinueL.setText("Continue");
        ContinueL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinueLActionPerformed(evt);
            }
        });
        getContentPane().add(ContinueL);
        ContinueL.setBounds(430, 410, 240, 70);

        ContinueW.setBackground(new java.awt.Color(200, 50, 0));
        ContinueW.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ContinueW.setText("Continue");
        ContinueW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinueWActionPerformed(evt);
            }
        });
        getContentPane().add(ContinueW);
        ContinueW.setBounds(430, 410, 240, 70);

        deadEyes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deadEyes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/deadeyes.png"))); // NOI18N
        getContentPane().add(deadEyes);
        deadEyes.setBounds(370, 210, 27, 40);

        rightFoot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rightFoot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/rightfoot.png"))); // NOI18N
        getContentPane().add(rightFoot);
        rightFoot.setBounds(340, 320, 120, 80);

        leftFoot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        leftFoot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/leftfoot.png"))); // NOI18N
        getContentPane().add(leftFoot);
        leftFoot.setBounds(310, 330, 110, 60);

        rightArm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rightArm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/rightarm.png"))); // NOI18N
        getContentPane().add(rightArm);
        rightArm.setBounds(360, 260, 80, 50);

        leftArm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        leftArm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/leftarm.png"))); // NOI18N
        getContentPane().add(leftArm);
        leftArm.setBounds(350, 260, 40, 50);

        body.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        body.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/body.png"))); // NOI18N
        getContentPane().add(body);
        body.setBounds(330, 240, 110, 120);

        head.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/head.png"))); // NOI18N
        getContentPane().add(head);
        head.setBounds(360, 200, 70, 60);

        backround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/backround.jpg"))); // NOI18N
        getContentPane().add(backround);
        backround.setBounds(0, -10, 700, 510);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AActionPerformed
        chosenLetters.add("a"); //adds the letter to chosenLetters
        A.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("a"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_AActionPerformed

    private void BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActionPerformed
        chosenLetters.add("b"); //adds the letter to chosenLetters
        B.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("b"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_BActionPerformed

    private void CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CActionPerformed
        chosenLetters.add("c"); //adds the letter to chosenLetters
        C.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("c"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_CActionPerformed

    private void DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DActionPerformed
        chosenLetters.add("d"); //adds the letter to chosenLetters
        D.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("d"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_DActionPerformed

    private void EActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EActionPerformed
        chosenLetters.add("e"); //adds the letter to chosenLetters
        E.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("e"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_EActionPerformed

    private void FActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FActionPerformed
        chosenLetters.add("f"); //adds the letter to chosenLetters
        F.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("f"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_FActionPerformed

    private void GActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GActionPerformed
        chosenLetters.add("g"); //adds the letter to chosenLetters
        G.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("g"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_GActionPerformed

    private void HActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HActionPerformed
        chosenLetters.add("h"); //adds the letter to chosenLetters
        H.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("h"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_HActionPerformed

    private void IActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IActionPerformed
        chosenLetters.add("i"); //adds the letter to chosenLetters
        I.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("i"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_IActionPerformed

    private void JActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JActionPerformed
        chosenLetters.add("j"); //adds the letter to chosenLetters
        J.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("j"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_JActionPerformed

    private void KActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KActionPerformed
        chosenLetters.add("k"); //adds the letter to chosenLetters
        K.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("k"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_KActionPerformed

    private void LActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LActionPerformed
        chosenLetters.add("l"); //adds the letter to chosenLetters
        L.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("l"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_LActionPerformed

    private void MActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MActionPerformed
        chosenLetters.add("m"); //adds the letter to chosenLetters
        M.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("m"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_MActionPerformed

    private void NActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NActionPerformed
        chosenLetters.add("n"); //adds the letter to chosenLetters
        N.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("n"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_NActionPerformed

    private void OActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OActionPerformed
        chosenLetters.add("o"); //adds the letter to chosenLetters
        O.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("o"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_OActionPerformed

    private void PActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PActionPerformed
        chosenLetters.add("p"); //adds the letter to chosenLetters
        P.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("p"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_PActionPerformed

    private void QActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QActionPerformed
        chosenLetters.add("q"); //adds the letter to chosenLetters
        Q.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("q"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_QActionPerformed

    private void RActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RActionPerformed
        chosenLetters.add("r"); //adds the letter to chosenLetters
        R.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("r"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_RActionPerformed

    private void SActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SActionPerformed
        chosenLetters.add("s"); //adds the letter to chosenLetters
        S.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("s"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_SActionPerformed

    private void TActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TActionPerformed
        chosenLetters.add("t"); //adds the letter to chosenLetters
        T.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("t"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_TActionPerformed

    private void UActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UActionPerformed
        chosenLetters.add("u"); //adds the letter to chosenLetters
        U.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("u"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_UActionPerformed

    private void VActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VActionPerformed
        chosenLetters.add("v"); //adds the letter to chosenLetters
        V.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("v"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_VActionPerformed

    private void WActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WActionPerformed
        chosenLetters.add("w"); //adds the letter to chosenLetters
        W.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("w"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_WActionPerformed

    private void XActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XActionPerformed
        chosenLetters.add("x"); //adds the letter to chosenLetters
        X.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("x"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_XActionPerformed

    private void YActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YActionPerformed
        chosenLetters.add("y"); //adds the letter to chosenLetters
        Y.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("y"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_YActionPerformed

    private void ZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZActionPerformed
        chosenLetters.add("z"); //adds the letter to chosenLetters
        Z.setEnabled(false); //disables the button
        String chosenLettersFormatted = chosenLetters.toString() //formats the chosenLetter
            .replace(",", "")  //remove the commas
            .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces
        boolean result = Arrays.stream(letters).anyMatch("z"::equals); //does the word contain the letter
        if (result) {
            spaces = wordsList[random].replaceAll("[^" + chosenLettersFormatted + "]", " _").trim(); //adds the letter to the display of the word
            wordDisplay.setText(spaces);
        }
        else { //this else statement will add the next body part to the hangman
            
            if (counter == 0){
                head.setVisible(true);
            }       
            else if (counter == 1) {
                body.setVisible(true);
            }
            else if (counter == 2) {
                rightArm.setVisible(true);
            }
            else if (counter == 3) {
                leftArm.setVisible(true);
            }
            else if (counter == 4) {
                leftFoot.setVisible(true);
            }
            else if (counter == 5) { //if all the body parts have been added except right foot
                rightFoot.setVisible(true);
                deadEyes.setVisible(true);
                lose(); //runs the lose function
                
            }
            counter += 1; //this counter keeps track of the wrong anwsers  
        }
        
        if (!spaces.contains("_")) { //if all the blank spaces are gone
            win(); //runs the win function
        }
    }//GEN-LAST:event_ZActionPerformed

    private void ContinueLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinueLActionPerformed
        new LoseScreen().setVisible(true); //shows the losing screen
        this.setVisible(false); //makes the PlayScreen invisable
    }//GEN-LAST:event_ContinueLActionPerformed

    private void ContinueWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinueWActionPerformed
        new WinScreen().setVisible(true); //shows the losing screen
        this.setVisible(false); //makes the PlayScreen invisable
    }//GEN-LAST:event_ContinueWActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PlayScreen().setVisible(true);
                } catch (SAXException ex) {
                    Logger.getLogger(PlayScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton A;
    private javax.swing.JButton B;
    private javax.swing.JButton C;
    private javax.swing.JButton ContinueL;
    private javax.swing.JButton ContinueW;
    private javax.swing.JButton D;
    private javax.swing.JButton E;
    private javax.swing.JButton F;
    private javax.swing.JButton G;
    private javax.swing.JButton H;
    private javax.swing.JButton I;
    private javax.swing.JButton J;
    private javax.swing.JButton K;
    private javax.swing.JButton L;
    private javax.swing.JButton M;
    private javax.swing.JButton N;
    private javax.swing.JButton O;
    private javax.swing.JButton P;
    private javax.swing.JButton Q;
    private javax.swing.JButton R;
    private javax.swing.JButton S;
    private javax.swing.JButton T;
    private javax.swing.JButton U;
    private javax.swing.JButton V;
    private javax.swing.JButton W;
    private javax.swing.JButton X;
    private javax.swing.JButton Y;
    private javax.swing.JButton Z;
    private javax.swing.JLabel backround;
    private javax.swing.JLabel body;
    private javax.swing.JLabel deadEyes;
    private javax.swing.JLabel head;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel leftArm;
    private javax.swing.JLabel leftFoot;
    private javax.swing.JLabel rightArm;
    private javax.swing.JLabel rightFoot;
    private javax.swing.JTextField wordDisplay;
    // End of variables declaration//GEN-END:variables
}
